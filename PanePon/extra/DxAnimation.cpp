
#include "DxAnimation.h"

/**************************************************************
*	リセット
**************************************************************
*	変数をすべてリセットする
**************************************************************
*	引数：
*		なし
*
*	戻り値:
*		void
*
*************************************************************/
void DxAnimation::Release(void)
{
	NowFrame = 0;						// 現在のフレーム
	NextStep = 1;						// 次へのステップ数 
	NowStep = 0;						// 現在のステップ数
	RepeatFlag = false;					// リピートフラグ
	pGraphic = NULL;					// 画像データへのポインタ
	pGraphicClass = NULL;				// グラフィッククラス
}

/**************************************************************
 *	ステップ進行
 **************************************************************
 *	進行数分だけステップを進行させる。巻き戻しはサポートしない。
 **************************************************************
 *	引数：	
 *		int step
 *		->			
 *
 *	戻り値:
 *		int
 *			-1	エラー
 *			0	異常なし
 *			1	リピートフラグがfalseかつ再生終了
 *
 *************************************************************/
int DxAnimation::DoStep( int step )
{
	if( pGraphicClass == NULL || step < 0 || NextStep < 0 )
		return -1;	// error

	// Step frame
	NowFrame += ( NowStep + step ) / NextStep;

	// Now step update
	NowStep = ( NowStep + step ) % NextStep;

	if( pGraphicClass->GetNumber() <= NowFrame )
	{
		if( RepeatFlag == true )
		{
			NowFrame -= pGraphicClass->GetNumber();
			return 0;	// Animation is repeated
		}

		ToEnd();
		return 1;	// Animation is end
	}

	return 0;	// No error
}

/**************************************************************
 *	チェック_再生終了
 **************************************************************
 *	現在のフレーム = 総フレーム数-1
 *	現在のステップ数 = 次へのステップ数
 *	かをチェックする。
 **************************************************************
 *	引数：	
 *		なし
 *
 *	戻り値:
 *		boolean
 *			true	再生終了
 *			false	再生終了でない	
 *
 *************************************************************/
bool DxAnimation::CheckEnd( void )	const
{
	if( NowFrame == pGraphicClass->GetNumber() - 1 || NowStep == NextStep )
		return true;
	return false;
}

/**************************************************************
 *	設定_リピートフラグ
 **************************************************************
 *	リピートフラグを設定。
 **************************************************************
 *	引数：	
 *		bool
 *		->リピートフラグ
 *
 *	戻り値:
 *		なし
 *
 *************************************************************/
void DxAnimation::SetRepeatFlag( bool repeat )
{
	RepeatFlag = repeat;
}

/**************************************************************
 *	取得_リピートフラグ
 **************************************************************
 *	リピートフラグを取得する。
 **************************************************************
 *	引数：	
 *		なし
 *
 *	戻り値:
 *		リピートフラグの状態
 *
 *************************************************************/
bool DxAnimation::GetRepeatFlag( void )	const
{
	return RepeatFlag;
}

/**************************************************************
 *	最初のフレームまでシーク
 **************************************************************
 *	再生状況を初期状態にする。
 **************************************************************
 *	引数：	
 *		なし
 *
 *	戻り値:
 *		なし
 *
 *************************************************************/
void DxAnimation::ToFirst( void )
{
	NowFrame = 0;
	NowStep = 0;
}

/**************************************************************
 *	最後のフレームまでシーク
 **************************************************************
 *	再生状況を最終状態にする。
 *	現在のフレーム = 総フレーム数-1
 *	現在のステップ数 = 次へのステップ数
 **************************************************************
 *	引数：	
 *		なし
 *
 *	戻り値:
 *		なし
 *
 *************************************************************/
void DxAnimation::ToEnd( void )
{
	if( pGraphicClass == NULL )
		return ;

	NowFrame = pGraphicClass->GetNumber() - 1;
	NowStep = NextStep;
}

/**************************************************************
 *	設定_現在のフレーム
 **************************************************************
 *	指定のフレームへ移動する。ステップリセットフラグがtrueなら、
 *	現在のステップ数を0にする。
 **************************************************************
 *	引数：	
 *		int	frameNumber
 *		->	フレーム数
 *
 *		int	stepResetFlag
 *		->	再設定フラグ
 *
 *	戻り値:
 *	0	成功
 *	-1	失敗
 *
 *************************************************************/
int	DxAnimation::SetFrameNumber( int frameNumber, bool stepResetFlag )
{
	if( pGraphicClass == NULL )
		return -1;

	if( frameNumber < 0 || pGraphicClass->GetNumber() <= frameNumber )
		return -1;	// error

	if( stepResetFlag == true )
	{
		frameNumber = 0;
	//	return 0;	// success	ステップのリセットと同時にフレームのリセットもおこなう
	}

	this->NowFrame = frameNumber;
	return 0;	// success
}

/**************************************************************
 *	取得_現在のフレーム
 **************************************************************
 *	現在のフレーム数を取得する。
 **************************************************************
 *	引数：	
 *		なし
 *
 *	戻り値:
 *	
 *	-1	失敗
 *
 *************************************************************/
int	DxAnimation::GetFrameNumber( void )	const
{
	return this->NowFrame;
}

/**************************************************************
 *	設定_次までのステップ数
 **************************************************************
 *	次のフレームへ移行するまでに必要なステップ数を取得する
 **************************************************************
 *	引数：	
 *		int	stepNumber
 *		->	ステップ数
 *
 *	戻り値:
 *	0	成功
 *	-1	失敗
 *
 *************************************************************/
int	DxAnimation::SetNextStep( int stepNumber )
{
	if( pGraphicClass == NULL )
		return -1;

	if( stepNumber < 0 )
		return -1;	// error
	
	this->NextStep = stepNumber;
	return 0;	// success
}

/**************************************************************
 *	取得_次までのステップ数
 **************************************************************
 *	次のフレームへ移行するまでに必要なステップ数を取得する
 **************************************************************
 *	引数：	
 *		なし
 *
 *	戻り値:
 *	0以上	ステップ数
 *	-1		失敗
 *
 *************************************************************/
int	DxAnimation::GetNextStep( void )	const
{
	if( pGraphicClass == NULL )
		return -1;

	return this->NextStep;	// success
}

/**************************************************************
 *	取得_グラフィックハンドル
 **************************************************************
 *	グラフィックハンドルを貰う
 **************************************************************
 *	引数：	
 *		なし
 *
 *	戻り値:
 *	
 *	-1	失敗
 *
 *************************************************************/
int	DxAnimation::GetHandle( void )	const
{
	if( pGraphicClass == NULL )
		return -1;
	return pGraphicClass->GetHandle( this->NowFrame );
}

/**************************************************************
 *	設定_グラフィッククラス
 **************************************************************
 *	グラフィッククラスを設定
 **************************************************************
 *	引数：	
 *		DxGraphic* pGraphicClass
 *		->	グラフィッククラス
 *
 *	戻り値:
 *		なし
 *
 *************************************************************/
void DxAnimation::SetGraphic( const	DxGraphic* pGraphicClass )
{
	this->pGraphicClass = pGraphicClass;
}

/**************************************************************
*	代入
**************************************************************
*	他のDxAnimationインスタンスのパラメータをコピーする
**************************************************************
*	引数：
*		const DxAnimation& another
*		->	コピー元
*
*	戻り値:
*		自身への参照
*
*************************************************************/
DxAnimation& DxAnimation::operator = (const DxAnimation& another)
{
	this->NextStep = another.NextStep;
	this->NowFrame = another.NowFrame;
	this->NowStep = another.NowStep;
	this->pGraphic = another.pGraphic;
	this->pGraphicClass = another.pGraphicClass;
	this->RepeatFlag = another.RepeatFlag;
	return *this;
}

/**************************************************************
 *	コンストラクタ
 **************************************************************
 *	初期処理を行う
 **************************************************************
 *	引数：	
 *		なし
 *
 *************************************************************/
DxAnimation::DxAnimation()
{
	NowFrame = 0;						// 現在のフレーム
	NextStep = 1;						// 次へのステップ数 
	NowStep = 0;						// 現在のステップ数
	RepeatFlag = false;					// リピートフラグ
	pGraphic = NULL;					// 画像データへのポインタ
	pGraphicClass = NULL;				// グラフィッククラス
}

/**************************************************************
 *	コンストラクタ
 **************************************************************
 *	初期処理を行う
 **************************************************************
 *	引数：	
 *		GraphicData_PTR	graphic_ptr
 *		->	画像へのポインタ
 *
 *************************************************************/
DxAnimation::DxAnimation( GraphicData_PTR graphic_ptr )
{
	NowFrame = 0;						// 現在のフレーム
	NextStep = 1;						// 次へのステップ数 
	NowStep = 0;						// 現在のステップ数
	RepeatFlag = false;					// リピートフラグ
	pGraphic = graphic_ptr;				// 画像データへのポインタ
	pGraphicClass = NULL;				// グラフィッククラス
}

/**************************************************************
 *	コンストラクタ
 **************************************************************
 *	初期処理を行う
 **************************************************************
 *	引数：	
 *		DxGraphic* pGraphicClass
 *		->	グラフィッククラスへのポインタ
 *
 *************************************************************/
DxAnimation::DxAnimation( DxGraphic* pGraphicClass )
{
	NowFrame = 0;						// 現在のフレーム
	NextStep = 1;						// 次へのステップ数 
	NowStep = 0;						// 現在のステップ数
	RepeatFlag = false;					// リピートフラグ
	pGraphic = NULL;					// 画像データへのポインタ
	this->pGraphicClass = pGraphicClass;		// グラフィッククラス
}

///**************************************************************
// *	デストラクタ
// **************************************************************
// *	後処理を行う
// *	画像の解放
// **************************************************************
// *	引数：	
// *		なし
// *
// *************************************************************/
//DxAnimation::~DxAnimation()
//{	
//}