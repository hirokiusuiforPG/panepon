#include "DxSound.h"
using namespace std;

//Static変数の実体の定義
int DxSound::MasterVolume = 255;
std::list<DxSound*> DxSound::InstanceList;

/************************************************ 関数の実装 ************************************************/

/************************************************************************************************
関数名：DxSound		(コンストラクタ)
引　数：なし
戻り値：なし
機　能：
　変数の初期化を行う。一番最初のインスタンスだった場合はマスターボリュームを初期化する。インスタ
ンスリストに自らを登録する。
************************************************************************************************/
DxSound::DxSound()
{
	//変数の初期化
	Handle = -1;
	Volume = 255;

	//インスタンスリストに自身をプッシュ
	InstanceList.push_back(this);
}
/************************************************************************************************
関数名：DxSound		(コピーコンストラクタ)
引　数：
1:		const DxSound& original
戻り値：なし
機　能：
　コピー関数を実行した後、インスタンスリストに自らを登録する。
************************************************************************************************/
DxSound::DxSound(const DxSound& original)
{
	//変数の初期化
	Handle = -1;
	//インスタンスリストに自身をプッシュ
	InstanceList.push_back(this);
	
	//コピー関数を呼び出す
	Copy(original);
}
/************************************************************************************************
関数名：~DxSound	(デストラクタ)
引　数：なし
戻り値：なし
機　能：
　解放関数を実行した後、インスタンスリストから自らを削除する。
************************************************************************************************/
DxSound::~DxSound()
{
	Release();
	InstanceList.remove(this);
}

/************************************************************************************************
関数名：Load
引　数：
1:		const char* filePath	読み込むファイルのファイルパス
戻り値：int
1:		0	正常終了
2:		-1	エラー
機　能：
　指定された音声ファイルを読み込む。また、Volumeを255に設定する。すでに読み込まれたファイルがある
場合は、-1を返す。
************************************************************************************************/
int				DxSound::Load(const char* filePath)
{
	//すでに読み込まれたファイルがあるならエラー終了
	if(Handle != -1)return -1;

	//ファイルを読み込む
	Handle = LoadSoundMem(filePath);
	//ファイルの読み込みに失敗したならエラー終了
	if(Handle == -1)return -1;

	//Volumeを最大に設定
	Volume = 255;
	//音量の設定
	ChangeVolumeSoundMem( Volume * MasterVolume / 255 , Handle);

	return 0;
}

/************************************************************************************************
関数名：Release
引　数：なし
戻り値：なし
機　能：
　保持している音声データを解放し、設定を初期化する。
************************************************************************************************/
void			DxSound::Release()
{
	//すでに初期状態なら終了
	if(Handle == -1)return ;

	//音声データを削除
	DeleteSoundMem( Handle );
	//変数を初期化
	Handle = -1;
	Volume = 255;
}

/************************************************************************************************
関数名：Play
引　数：
1:		int PlayType			再生タイプ
								DX_PLAYTYPE_NORMAL　:　ノーマル再生
								DX_PLAYTYPE_BACK　　:　バックグラウンド再生
								DX_PLAYTYPE_LOOP　　:　ループ再生
2:		int TopPositionFlag		再生時に一番最初まで巻き戻すかのフラグ(TRUE or FALSE)
戻り値：int
1:		0	正常終了
2:		-1	エラー
機　能：
　読み込んでいる音声を再生する。
************************************************************************************************/
int				DxSound::Play(int PlayType, int TopPositionFlag)
{
	//読み込まれたデータがないならエラー終了
	if(Handle == -1)return -1;
	return PlaySoundMem(Handle, PlayType, TopPositionFlag);
}

/************************************************************************************************
関数名：Play
引　数：なし
戻り値：int
1:		0	正常終了（再生を停止した）
2:		-1	エラー（すでに停止していた、データがなかった）
機　能：
　読み込んでいる音声を再生する。
************************************************************************************************/
int				DxSound::Stop(void)
{
	//読み込まれたデータがないならエラー終了
	if(Handle == -1)return -1;
	return StopSoundMem(Handle);
}

/************************************************************************************************
関数名：Copy
引　数：
		const DxSound& original			コピー元のインスタンス
戻り値：int
1:		0	正常終了
2:		-1	エラー
機　能：
　すでに存在するサウンドハンドルを複製する。音量もコピーする。
************************************************************************************************/
int				DxSound::Copy(const DxSound& original)
{
	//すでに読み込まれたデータがあるならエラー終了
	if(Handle != -1)return -1;
	//コピー元のサウンドハンドルが不正でもエラー終了
	if(original.GetHandle() == -1)return -1;

	//コピー元のサウンドハンドルを用いて複製を作成
	Handle = DuplicateSoundMem( original.GetHandle() );

	//複製に失敗したらエラー終了
	if(Handle == -1)return -1;

	//音量も真似る
	Volume = original.GetVolume();
	//音量の設定
	ChangeVolumeSoundMem( Volume * MasterVolume / 255 , Handle);
	return 0;
}

/************************************************************************************************
関数名：CheckPraying
引　数：なし
戻り値：bool
1:		1	再生中
2:		0	再生中でない or エラー
機　能：
　音声を再生中かを取得する
************************************************************************************************/
bool				DxSound::CheckPraying(void)
{
	//データがないならfalse
	if(Handle == -1)return false;
	//再生中かチェック
	return  (CheckSoundMem(Handle) != 0);
}

/************************************************************************************************
関数名：SetLoopPos
引　数：
1:		int LoopTime		ループ位置（ミリ秒単位）
戻り値：int
1:		0	正常終了
2:		-1	エラー
機　能：
　ループ再生のためにループ位置を決定する。（ミリ秒単位）
************************************************************************************************/
int				DxSound::SetLoopPos(int LoopTime)
{
	//読み込まれたデータがないならエラー終了
	if(Handle == -1)return -1;
	//ループ位置をセット
	return SetLoopPosSoundMem(LoopTime, Handle) ;
}

/************************************************************************************************
関数名：SetLoopPos
引　数：
1:		int LoopTime		ループ位置（サンプル秒単位）
戻り値：int
1:		0	正常終了
2:		-1	エラー
機　能：
　ループ再生のためにループ位置を決定する。（サンプル秒単位）
************************************************************************************************/
int				DxSound::SetLoopSamplePos(int LoopSamplePosition)
{
	//読み込まれたデータがないならエラー終了
	if(Handle == -1)return -1;
	//ループ位置をセット
	return SetLoopSamplePosSoundMem(LoopSamplePosition, Handle) ;
}


/************************************************************************************************
関数名：SetMasterVolume
引　数：
1:		int volume		マスターボリュームの値(0 <= volume <= 255)
戻り値：int
1:		0	正常終了
2:		-1	エラー
機　能：
　マスターボリュームを設定した後、サウンドハンドルを持っているインスタンスの音量を設定しなおす。
************************************************************************************************/
void	DxSound::SetMasterVolume(int volume)
{
	//引数を代入
	MasterVolume = volume;
	//範囲外の値なら最大値か最小値にあわせる
	if(MasterVolume < 0  ) MasterVolume = 0;
	if(MasterVolume > 255) MasterVolume = 255;

	//イテレータを宣言
	list<DxSound*>::iterator it;

	//すべてのインスタンスを調査
	for(it = InstanceList.begin(); it != InstanceList.end(); it++)
	{
		//インスタンスがサウンドハンドルを持っているなら
		if((*it)->GetHandle() != -1)
		{
			//音量を現在地で再設定する（マスターボリュームを適用）
			(*it)->SetVolume((*it)->GetVolume());
		}
	}
}